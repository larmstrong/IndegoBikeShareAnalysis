# Create icons to mark very active, more active, and less active bike stations
icon_bike_lightblue <- makeAwesomeIcon(
icon = "bicycle", markerColor = 'lightblue', library = 'fa', squareMarker =  FALSE)
icon_bike_blue <- makeAwesomeIcon(
icon = "bicycle", markerColor = 'blue', library = 'fa', squareMarker =  FALSE)
icon_bike_orange <- makeAwesomeIcon(
icon = "bicycle", markerColor = 'orange', library = 'fa', squareMarker =  FALSE)
icon_bike_red <- makeAwesomeIcon(
icon = "bicycle", markerColor = 'red', library = 'fa', squareMarker =  FALSE)
icon_bike_white <- makeAwesomeIcon(
icon = "bicycle", markerColor = 'white', library = 'fa', squareMarker =  FALSE)
icon_bike_yellow <- makeAwesomeIcon(
icon = "bicycle", markerColor = "beige", library = 'fa', squareMarker =  FALSE)
icon_bike_green <- makeAwesomeIcon(
icon = "bicycle", markerColor = 'green', library = 'fa', squareMarker =  FALSE)
icon_you_are_here <- makeAwesomeIcon(
icon = "user", markerColor = 'white', library = 'fa', squareMarker =  TRUE)
# Create subsets of stations to serve as separate icon layers.
lightblue_subset   <- stations[stations$marker_color == "lightblue", ]
blue_subset   <- stations[stations$marker_color == "blue", ]
orange_subset <- stations[stations$marker_color == "orange", ]
red_subset    <- stations[stations$marker_color == "red", ]
m_allstations <- m_base %>%
# Add the white (less active) markers
addAwesomeMarkers(
lng = lightblue_subset$longitude, lat = lightblue_subset$latitude,
icon = icon_bike_lightblue, popup = lightblue_subset$marker_label) %>%
# Add the blue (active) markers
addAwesomeMarkers(
lng = blue_subset$longitude, lat = blue_subset$latitude,
icon = icon_bike_blue, popup = blue_subset$marker_label) %>%
# Add the orange (more active) markers
addAwesomeMarkers(
lng = orange_subset$longitude, lat = orange_subset$latitude,
icon = icon_bike_orange, popup = orange_subset$marker_label) %>%
# Add the red (very active) markers
addAwesomeMarkers(
lng = red_subset$longitude, lat = red_subset$latitude,
icon = icon_bike_red, popup = red_subset$marker_label)
m_allstations
m_allstations_allphilly <-
m_allstations %>%
setView(lng = philly$lon, lat = philly$lat, zoom = 11)
m_allstations_allphilly
m_walkup <- m_base %>%
addAwesomeMarkers(
lng = walkup_stations$longitude, lat = walkup_stations$latitude,
icon = icon_bike_white, popup = walkup_stations$marker_label)
m_walkup
##-------------------------------------------------------------------------------------------------
## ASSOCIATION RULES
# Run some general association rules.
# Define columns to be included in the rule sets.
rules_columns <- c(
"bike_type", "trip_route_category", "passholder_type", "start_month", "start_day_of_week",
"start_hour", "duration_in_half_hours", "start_station_f", "end_station_f")
# Define a list of common rules to be excluded from the rule sets because these rules are
# excessivley common. Over 99% of all bikes are standard. Over 88% of all trips are less than
# 1/2 hour. Almost 72 of all pass types are Indego 30.
common_rules <- c("bike_type=standard", "duration_in_half_hours=1", "passholder_type=Indego30")
# Define an format the input data for rules generation.
rules_subset <- trips[, rules_columns]
transacton_data <- as(rules_subset, "transactions")
# Generate and summarize the rules.
rules <- arules::apriori(
data = transacton_data,
parameter = list(support = 0.01, confidence = 0.1, minlen = 2),
appearance = list(none = common_rules))
summary(rules)
# Sort (by lift) and view the rules.
srules <- sort(rules, decreasing = TRUE, by = "lift")
inspect(srules)
# Define the list of data eleemnts to be inter-associated.
from_to <- c("start_station_f", "end_station_f")
# Define and format the data subset to be input to the association rules process.
from_to_subset <- trips[, from_to]
from_to_transactions <- as(from_to_subset, "transactions")
# To ensure that all rules start with a start station and end with an end station, create a list
# of rule clauses of the form "start_station=nnnn" where nnnn are station ids. This list will be
# used to ensure that start_stations appear only on the LHS of the rule.
start_rules <- c(paste("start_station_f=", sort(unique(trips$start_station)), sep=""))
# Generate and summarize the start-station/end-station rules.
from_to_rules <- arules::apriori(
data = from_to_transactions,
parameter = list(support = 0.00001, minlen = 2, target = "frequent itemsets"),
appearance = list(lhs = start_rules))
summary(from_to_rules)
# Sort and view the rules by support, which should be equal to the most common start/stop
# destination pairs.
from_to_srules <- sort(from_to_rules, decreasing = TRUE, by = "support")
inspect(from_to_srules)
# Create a convenience function that will return the station from a single side of a rule.
get_station_id <- function (rules) {
# Define requisite search patterns.
start_pattern <- "start_station_f=[0-9]+"
end_pattern <- "end_station_f=[0-9]+"
num_pattern <- "[0-9]+"
# Pull start_station labels of the form "start_station=nnnn" from the left-hand side of the rules
# and then get the numberic (station #) portion of the rule only.
lhs <- unlist(lapply(X=rules, FUN=function(x) str_match(string=x, pattern=start_pattern)))
start_stns <- unlist(lapply(X=lhs, FUN=function(x) str_match(string=x, pattern=num_pattern)))
# Pull start_station labels of the form "end_station=nnnn" from the left-hand side of the rules
# and then get the numberic (station #) portion of the rule only.
rhs <- unlist(lapply(X=rules, FUN=function(x) str_match(string=x, pattern=end_pattern)))
end_stns <- unlist(lapply(X=rhs, FUN=function(x) str_match(string=x, pattern=num_pattern)))
# Save the result and remove garbage before exiting.
result = data.frame(from_station = start_stns, to_station = end_stns, stringsAsFactors = FALSE)
rm(start_pattern, end_pattern, num_pattern)
rm(lhs, rhs, start_stns, end_stns)
# Return
return(result)
}
# Extract the rules by text
top10triprules <- labels(from_to_srules[1:10])
top10tripdata <- get_station_id(top10triprules)
# Subset the trips into one-way and roundtrip
top1waydata <- top10tripdata[top10tripdata$from_station == top10tripdata$to_station, ]
toproundtripdata <- top10tripdata[top10tripdata$from_station != top10tripdata$to_station, ]
lat1way <- stations$latitude[stations$kioskId == top1waydata$from_station]
lon1way <- stations$longitude[stations$kioskId == top1waydata$from_station]
m_toptrips <- m_base %>%
addAwesomeMarkers(
lng = stations$longitude[stations$kioskId %in% top1waydata$from_station],
lat = stations$latitude[stations$kioskId %in% top1waydata$from_station],
icon = icon_bike_white,
popup = stations$marker_label[stations$kioskId %in% top1waydata$from_station])
m_toptrips
# Create a
paths <- data.frame(
grp   = "Route" %s+% 1:nrow(toproundtripdata),
fr_st = toproundtripdata$from_station,
to_st = toproundtripdata$to_station,
stringsAsFactors = FALSE)
for (i in 1:nrow(paths)) {
from_lat <- stations$latitude[stations$kioskId == paths$fr_st[i]]
from_long <- stations$longitude[stations$kioskId == paths$fr_st[i]]
from_marker <- stations$marker_label[stations$kioskId == paths$fr_st[i]]
to_lat <- stations$latitude[stations$kioskId == paths$to_st[i]]
to_long <- stations$longitude[stations$kioskId == paths$to_st[i]]
to_marker <- stations$marker_label[stations$kioskId == paths$to_st[i]]
m_toptrips <- m_toptrips %>%
addAwesomeMarkers(lng = from_long, lat = from_lat, icon = icon_bike_blue, popup = from_marker) %>%
addAwesomeMarkers(lng = to_long, lat = to_lat, icon = icon_bike_blue, popup = to_marker) %>%
addFlows(
lng0 = from_long, lat0 = from_lat,
lng1 = to_long, lat1 = to_lat,
color = ifelse(from_long > to_long, "blue", "red"),
maxFlow = 10, flow = 5, maxThickness = 10)
}
m_toptrips
##-------------------------------------------------------------------------------------------------
## CLUSTERING - KMEANS
set.seed(100163)
kmc_data_orig <- stations[, c("kioskId", "latitude", "longitude", "bikesAvailable")]
kmc_data <- kmc_data_orig
kmc_data$latitude <- abs(scale(kmc_data$latitude, center = TRUE))
kmc_data$longitude <- abs(scale(kmc_data$longitude, center = TRUE))
kmc_data$bikesAvailable <- abs(scale(kmc_data$bikesAvailable, center = TRUE))
# kmc_data$totalDocks <- abs(scale(kmc_data$totalDocks, center = TRUE))
km_model <- stats::kmeans(x = kmc_data[, -1], centers = 5, nstart = 10)
kmc_data <- kmc_data %>%
mutate(cluster = km_model$cluster)
cl1 <- stations[(stations$kioskId == kmc_data$kioskId) & (kmc_data$cluster == 1), ]
cl2 <- stations[(stations$kioskId == kmc_data$kioskId) & (kmc_data$cluster == 2), ]
cl3 <- stations[(stations$kioskId == kmc_data$kioskId) & (kmc_data$cluster == 3), ]
cl4 <- stations[(stations$kioskId == kmc_data$kioskId) & (kmc_data$cluster == 4), ]
cl5 <- stations[(stations$kioskId == kmc_data$kioskId) & (kmc_data$cluster == 5), ]
m_km <- m_base %>%
addAwesomeMarkers(
lng = cl1$longitude, lat = cl1$latitude, icon = icon_bike_blue, popup = cl1$marker_label) %>%
addAwesomeMarkers(
lng = cl2$longitude, lat = cl2$latitude, icon = icon_bike_red, popup = cl2$marker_label) %>%
addAwesomeMarkers(
lng = cl3$longitude, lat = cl3$latitude, icon = icon_bike_green, popup = cl3$marker_label) %>%
addAwesomeMarkers(
lng = cl4$longitude, lat = cl4$latitude, icon = icon_bike_white, popup = cl4$marker_label) %>%
addAwesomeMarkers(
lng = cl5$longitude, lat = cl5$latitude, icon = icon_bike_yellow, popup = cl5$marker_label)
m_km
# Create a 3D plot to show how the
scatter3D(x = cl1$longitude, y = cl1$latitude, z = cl1$bikesAvailable, col = "blue", phi = -1, bty="b2")
scatter3D(x = cl3$longitude, y = cl3$latitude, z = cl3$bikesAvailable, col = "green", add = TRUE)
##-------------------------------------------------------------------------------------------------
## CLUSTERING - HCLUST
set.seed(100163)
# Pick a point representing "YOU ARE HERE".
my_lon <- -75.16
my_lat <- 39.972
# Create a smaller sample data subset
hc_data_orig <- stations[, c("kioskId", "marker_label", "latitude", "longitude")]
hc_data <- dplyr::sample_n(tbl = hc_data_orig, size = 12, replace = FALSE)
# Add new points forcing the selected point to the center.
my_location <- data.frame(
kioskId = "*ME*", marker_label = "ME", latitude = my_lat, longitude = my_lon)
hc_data <- rbind(hc_data, my_location)
# Name each sample by the kiosk.
rownames(hc_data) <- hc_data$kioskId
hc_dist <- stats::dist(hc_data[, 3:4], method = "manhattan")
hc_clust <- stats::hclust(d = hc_dist, method = "single")
plot(hc_clust)
hc_labels <- hc_clust$labels
hc_order <- hc_clust$order
m_hc <- m_base
for (i in hc_order) {
if (hc_labels[i] == "*ME*") {
m_hc <- m_hc %>%
addAwesomeMarkers(
lng = hc_data[hc_data$kioskId == hc_labels[i], "longitude"],
lat = hc_data[hc_data$kioskId == hc_labels[i], "latitude"],
icon = icon_you_are_here,
popup = hc_data[hc_data$kioskId == hc_labels[i], "marker_label"])
} else {
m_hc <- m_hc %>%
addAwesomeMarkers(
lng = hc_data[hc_data$kioskId == hc_labels[i], "longitude"],
lat = hc_data[hc_data$kioskId == hc_labels[i], "latitude"],
icon = icon_bike_blue,
popup = hc_data[hc_data$kioskId == hc_labels[i], "marker_label"])
}
}
m_hc
##-------------------------------------------------------------------------------------------------
## DECISION TREE MODEL
# Record the station's usages for the year.
station_output <- table(trips$start_station)
station_intake <- table(trips$end_station)
# Add to the stations table. The "as.integer" part removes the table type from the saved data.
stations$output <- as.integer(station_output[stations$kioskId %in% names(station_output)])
stations$intake <- as.integer(station_intake[stations$kioskId %in% names(station_intake)])
# Goal: Determine which station a bike will likely be taken back to from day of week, hour of day,
# month, start station, and type of bike and passholder type
total_items <- nrow(trips)
total_range <- c(1:total_items)
dt_fields <- c(
"start_month", "start_day_of_week_monday", "start_hour",
#  "start_station_f", "end_station_f",
"start_lat", "start_lon", "end_station_f",
"bike_type", "passholder_type")
sample_items <- sample(total_range, size = 24, replace = FALSE)
sample_vol <- NROW(sample_items)
dt_data <- trips[sample_items, dt_fields]
# Run cross-folds validation
k <- 10
test_vol <- round(sample_vol/k)
for (fold in 1:1) {
#  train_range <- setdiff(sample_items, test_range)
dt_train <- dt_data
dt_test <- dt_data
print(system.time(dt_model <- rpart::rpart(
formula = end_station_f ~ .,
data = dt_train,
method = "class")))
f <- fancyRpartPlot(dt_model)
summary(dt_model)
}
##-------------------------------------------------------------------------------------------------
## DECISION TREE MODEL
# Goal: How long a trip will take given when it is taken out and the passholder type
total_items <- nrow(trips)
total_range <- c(1:total_items)
dt_fields <- c(
"duration", "start_month", "start_day_of_week_monday", "start_hour",
#               "start_station", "bike_type", "passholder_type")
"start_lat", "start_lon", "bike_type", "passholder_type")
sample_items <- sample(total_range, size = 1000, replace = FALSE)
sample_vol <- NROW(sample_items)
dt_data <- trips[sample_items, dt_fields]
# Run cross-folds validation
k <- 10
test_vol <- round(sample_vol/k)
for (fold in 1:1) {
#  train_range <- setdiff(sample_items, test_range)
dt_train <- dt_data
dt_test <- dt_data
print(system.time(dt_model <- rpart::rpart(
formula = duration ~ .,
data = dt_train,
method = "anova",
control = rpart.control(minsplit = 30))))
f <- fancyRpartPlot(dt_model)
}
rf_fields <- c(
"end_station_f",
"start_time",
#  "start_month", "start_day_of_week_monday", "start_hour",
"bike_id", "bike_type", "passholder_type", "start_lat", "start_lon", "duration")
#"bike_type", "passholder_type", "start_station_f", "end_station_f")
total_items <- nrow(trips)
total_range <- c(1:total_items)
# Subset from just the top 16 most used stations.
set.seed(rseed)
top_16_stations <- head(forcats::fct_infreq(c(trips$start_station, trips$end_station)), n=16)
trips_16 <- trips[(trips$start_station %in% top_16_stations) & (trips$end_station %in% top_16_stations), ]
# Renumber the rows
trips_16 <- data.frame(trips_16, row.names = NULL)
# Refactor the start and end stations to make them a factor of 16 items, not 130.
trips_16$start_station_f <- factor(trips_16$start_station_f)
trips_16$end_station_f <- factor(trips_16$end_station_f)
set.seed(rseed)
#sample_items <- sample(nrow(trips_16), size = 11000, replace = FALSE)
sample_items <- 1:nrow(trips_16)
sample_recs <- trips_16[sample_items, rf_fields]
sample_vol <- nrow(sample_recs)
results <- list()
# Run cross-folds validation
k <- 10
test_vol <- round(sample_vol/k)
for (fold in 1:k) {
cat("Fold ", fold, "\n", sep="")
test_range <- c(floor(((fold-1)*test_vol)+1):floor(min(fold*test_vol, sample_vol)))
# Leave out the end station labels.
rf_train <- sample_recs[-test_range, -1]
rf_test <- sample_recs[test_range, -1]
# Just the labels
rf_train_labels <- sample_recs$end_station_f[-test_range]
rf_test_labels <- sample_recs$end_station_f[test_range]
print(system.time(
rf_model <- randomForest::randomForest(
x = rf_train, xtest = rf_test, y = rf_train_labels, ytest = rf_test_labels, ntree = 200)))
rf_model$test$confusion
results[[fold]] <- rf_model$test$confusion
plot(rf_model)
}
rm (rf_fields, rf_train, rf_train_labels, rf_test, rf_test_labels)
rm(total_items, total_range)
rm(top_16_stations, trips_16)
rm(sample_items, sample_recs, sample_vol)
svm_fields <- c("end_station_f", "start_time", "start_lat", "start_lon", "duration")
kernel_param <- "radial"
c_param <- 10000
coef0_param <- 0
gamma_param <- 1.0
# Subset from just the top 16 most used stations.
set.seed(rseed)
top_16_stations <- head(forcats::fct_infreq(c(trips$start_station, trips$end_station)), n=16)
trips_16 <- trips[(trips$start_station %in% top_16_stations) & (trips$end_station %in% top_16_stations), ]
# Renumber the rows
trips_16 <- data.frame(trips_16, row.names = NULL)
# Refactor the start and end stations to make them a factor of 16 items, not 130.
trips_16$start_station_f <- factor(trips_16$start_station_f)
trips_16$end_station_f <- factor(trips_16$end_station_f)
trips_16$start_time <- as.numeric(trips_16$start_time)
total_items <- nrow(trips_16)
total_range <- c(1:total_items)
set.seed(rseed)
# #sample_items <- sample(nrow(trips_16), size = 11000, replace = FALSE)
# sample_items <- 1:nrow(trips_16)
# sample_recs <- trips_16[sample_items, rf_fields]
# sample_vol <- nrow(sample_recs)
results <- list()
subset_indices <- sample(x = total_range, size = 2000, replace = FALSE)
svm_trips <- trips_16[subset_indices, svm_fields]
svm_trips$start_time <- scale(svm_trips$start_time)
svm_trips$start_lat <- scale(svm_trips$start_lat)
svm_trips$start_lon <- scale(svm_trips$start_lon)
svm_trips$duration <- as.numeric(svm_trips$duration)
svm_trips$duration <- scale(svm_trips$duration)
svm_items <- nrow(svm_trips)
# Run cross-folds validation
k <- 10
test_vol <- round(svm_items/k)
for (fold in 1:k) {
cat("Fold ", fold, "\n", sep="")
test_range <- c(floor(((fold-1)*test_vol)+1):floor(min(fold*test_vol, svm_items)))
# Leave out the end station labels.
svm_train <- svm_trips[-test_range, ]
svm_test <- svm_trips[test_range, ]
# Just the labels
svm_train_labels <- svm_trips$end_station_f[-test_range]
svm_test_labels <- svm_trips$end_station_f[test_range]
print(system.time(
svm_model <- e1071::svm(
formula = end_station_f~., data=svm_train, kernel=kernel_param, cost=c_param, coef0 = coef0_param, scale=FALSE)))
svm_pred <- stats::predict(svm_model, svm_test)
cm <- table(svm_pred, svm_test_labels)
print(cm)
result <- sum(diag(cm))/sum(cm)
cat("Result: ", result, "\n")
# results[[fold]] <- rf_model$test$confusion
# plot(rf_model)
}
##-------------------------------------------------------------------------------------------------
## DECISION TREE MODEL
# Goal: How long a trip will take given when it is taken out and the passholder type
total_items <- nrow(trips)
total_range <- c(1:total_items)
dt_fields <- c(
"duration", "start_month", "start_day_of_week_monday", "start_hour",
#               "start_station", "bike_type", "passholder_type")
"start_lat", "start_lon", "bike_type", "passholder_type")
sample_items <- sample(total_range, size = 1000, replace = FALSE)
sample_vol <- NROW(sample_items)
dt_data <- trips[sample_items, dt_fields]
# Run cross-folds validation
k <- 10
test_vol <- round(sample_vol/k)
for (fold in 1:k) {
#  train_range <- setdiff(sample_items, test_range)
dt_train <- dt_data
dt_test <- dt_data
print(system.time(dt_model <- rpart::rpart(
formula = duration ~ .,
data = dt_train,
method = "anova",
control = rpart.control(minsplit = 30))))
f <- fancyRpartPlot(dt_model)
}
##-------------------------------------------------------------------------------------------------
## DECISION TREE MODEL
# Goal: How long a trip will take given when it is taken out and the passholder type
total_items <- nrow(trips)
total_range <- c(1:total_items)
dt_fields <- c(
"duration", "start_month", "start_day_of_week_monday", "start_hour",
#               "start_station", "bike_type", "passholder_type")
"start_lat", "start_lon", "bike_type", "passholder_type")
sample_items <- sample(total_range, size = 1000, replace = FALSE)
sample_vol <- NROW(sample_items)
dt_data <- trips[sample_items, dt_fields]
# Run cross-folds validation
k <- 10
test_vol <- round(sample_vol/k)
for (fold in 1:k) {
#  train_range <- setdiff(sample_items, test_range)
dt_train <- dt_data
dt_test <- dt_data
dt_model <- rpart::rpart(
formula = duration ~ .,
data = dt_train,
method = "anova",
control = rpart.control(minsplit = 30))
f <- fancyRpartPlot(dt_model)
}
##-------------------------------------------------------------------------------------------------
## DECISION TREE MODEL
# Goal: How long a trip will take given when it is taken out and the passholder type
total_items <- nrow(trips)
total_range <- c(1:total_items)
set.seed(rseed)
dt_fields <- c(
"duration", "start_month", "start_day_of_week_monday", "start_hour",
#               "start_station", "bike_type", "passholder_type")
"start_lat", "start_lon", "bike_type", "passholder_type")
sample_items <- sample(total_range, size = 1000, replace = FALSE)
sample_vol <- NROW(sample_items)
dt_data <- trips[sample_items, dt_fields]
# Run cross-folds validation
k <- 10
test_vol <- round(sample_vol/k)
for (fold in 1:k) {
#  train_range <- setdiff(sample_items, test_range)
dt_train <- dt_data
dt_test <- dt_data
dt_model <- rpart::rpart(
formula = duration ~ .,
data = dt_train,
method = "anova",
control = rpart.control(minsplit = 30))
f <- fancyRpartPlot(dt_model)
}
dt_model
?rpart
x <- plot(rf_model)
x
plot(rf_model, main = "Random Forest Error Rates For Determining Destination Station")
rf_fields <- c(
"end_station_f",
"start_time",
#  "start_month", "start_day_of_week_monday", "start_hour",
"bike_id", "bike_type", "passholder_type", "start_lat", "start_lon", "duration")
#"bike_type", "passholder_type", "start_station_f", "end_station_f")
total_items <- nrow(trips)
total_range <- c(1:total_items)
# Subset from just the top 16 most used stations.
set.seed(rseed)
top_16_stations <- head(forcats::fct_infreq(c(trips$start_station, trips$end_station)), n=16)
trips_16 <- trips[(trips$start_station %in% top_16_stations) & (trips$end_station %in% top_16_stations), ]
# Renumber the rows
trips_16 <- data.frame(trips_16, row.names = NULL)
# Refactor the start and end stations to make them a factor of 16 items, not 130.
trips_16$start_station_f <- factor(trips_16$start_station_f)
trips_16$end_station_f <- factor(trips_16$end_station_f)
set.seed(rseed)
#sample_items <- sample(nrow(trips_16), size = 11000, replace = FALSE)
sample_items <- 1:nrow(trips_16)
sample_recs <- trips_16[sample_items, rf_fields]
sample_vol <- nrow(sample_recs)
results <- list()
# Run cross-folds validation
k <- 10
test_vol <- round(sample_vol/k)
for (fold in 1:k) {
cat("Fold ", fold, "\n", sep="")
test_range <- c(floor(((fold-1)*test_vol)+1):floor(min(fold*test_vol, sample_vol)))
# Leave out the end station labels.
rf_train <- sample_recs[-test_range, -1]
rf_test <- sample_recs[test_range, -1]
# Just the labels
rf_train_labels <- sample_recs$end_station_f[-test_range]
rf_test_labels <- sample_recs$end_station_f[test_range]
print(system.time(
rf_model <- randomForest::randomForest(
x = rf_train, xtest = rf_test, y = rf_train_labels, ytest = rf_test_labels, ntree = 200)))
rf_model$test$confusion
results[[fold]] <- rf_model$test$confusion
plot(rf_model, main = "Random Forest Error Rates For Determining Destination Station")
}
plot(rf_model, main = "Random Forest Error Rates For Determining Destination Station")
stations$totalDocks
sum(stations$totalDocks)
sumary(stations$totalDocks)
summary(stations$totalDocks)
